AWSTemplateFormatVersion: 2010-09-09
Parameters:
  LatestEcsOptimizedAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id

  InstanceType:
    Type: String
    Description: 'For ECS EC2. Default: t3a.micro'
    Default: t3a.micro

  EnableContainerInsight:
    Type: String
    Description: 'Enable container insight on ECS cluster. Default: false'
    Default: false
    AllowedValues: [true, false]

Conditions:
  UseContainerInsight: !Equals [!Ref EnableContainerInsight, true]

Resources:
  # EC2
  Ec2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: For Wordpress EC2 container instance
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      RoleName: wordpress-ecs-ec2

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: wordpress-ecs-ec2
      Roles:
        - !Ref Ec2Role

  Ec2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: wordpress-ecs-ec2

  Ec2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref Ec2InstanceProfile
        ImageId: !Ref LatestEcsOptimizedAmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref Ec2KeyPair
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
        SecurityGroupIds:
          - !ImportValue Ec2SecurityGroupId
        UserData:
          Fn::Base64: !Sub
              - |
                #!/bin/bash
                sudo yum update -y
                echo ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config
                sudo mkdir -p /bitnami/wordpress
                echo '${NfsEndpoint}:/bitnami/wordpress /bitnami/wordpress  nfs defaults,nofail 0 0' | sudo tee -a /etc/fstab
                sudo mount -t nfs ${NfsEndpoint}:/bitnami/wordpress /bitnami/wordpress
                sudo chown -R 1001:1001 /bitnami/wordpress
              - EcsClusterName: wordpress
                NfsEndpoint: !ImportValue NfsEndpoint

  Ec2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate: 
        LaunchTemplateId: !Ref Ec2LaunchTemplate
        Version: !GetAtt Ec2LaunchTemplate.LatestVersionNumber
      MaxSize: 2
      MinSize: 1
      VPCZoneIdentifier: 
        - !ImportValue PrivateSubnetAId
        - !ImportValue PrivateSubnetBId

  Ec2AutoScalingGroupConfigureRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: For lambda-backed custom resource
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AutoScalingFullAccess
      RoleName: wordpress-lambda

  Ec2AutoScalingGroupConfigureFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import json
          import boto3
          import logging
          from botocore.exceptions import ClientError
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def handler(event, context):
              logger.info('### EVENT ###')
              logger.info(event)
              asgName = event['ResourceProperties']['AsgName']
              responseStatus = cfnresponse.SUCCESS
              asg_client = boto3.client("autoscaling")

              try:
                  if event['RequestType'] == 'Create':
                    set_minsize_to_1(asgName, asg_client)
                  elif event['RequestType'] == 'Delete':
                    set_minsize_to_0(asgName, asg_client)
              except Exception as e:
                  logger.error(e)
                  responseStatus = cfnresponse.FAILED                  
              cfnresponse.send(event, context, responseStatus, {})
                    
          def set_minsize_to_1(asgName, asg_client):
              asg_client.update_auto_scaling_group(AutoScalingGroupName=asgName,MinSize=1,DesiredCapacity=1)
          
          def set_minsize_to_0(asgName, asg_client):
              asg_client.update_auto_scaling_group(AutoScalingGroupName=asgName,MinSize=0,DesiredCapacity=0)
      FunctionName: wordpress-lambda
      Handler: index.handler
      Role: !GetAtt Ec2AutoScalingGroupConfigureRole.Arn
      Runtime: python3.12
      Timeout: 30
      
  Ec2AutoScalingGroupConfigureEventInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref Ec2AutoScalingGroupConfigureFunction
      MaximumRetryAttempts: 0
      Qualifier: $LATEST

  Ec2AutoScalingGroupConfigureCustomResource:
    Type: Custom::Ec2AutoScalingGroupConfigure
    Properties:
      ServiceToken: !GetAtt Ec2AutoScalingGroupConfigureFunction.Arn
      AsgName: !Ref Ec2AutoScalingGroup

  # ECS
  EcsCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider: 
        AutoScalingGroupArn: !Ref Ec2AutoScalingGroup
        ManagedDraining: ENABLED
        ManagedScaling: 
          MaximumScalingStepSize: 1 # default 10000
          # MinimumScalingStepSize: 1 # default 1
          Status: ENABLED

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - !Ref EcsCapacityProvider
      ClusterName: wordpress
      ClusterSettings:
        - Name: containerInsights
          Value: !If [UseContainerInsight, enabled, disabled]

  EcsTaskExePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Custom policy for ECS task execution
      ManagedPolicyName: wordpress-ecs-taskexe
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:*'
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !Sub 'arn:aws:secretsmanager:*:${AWS::AccountId}:secret:*'

  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Role for ECS task execution
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - !Ref EcsTaskExePolicy
      RoleName: wordpress-ecs-taskexe

  EcsBitnamiTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: ALLOW_EMPTY_PASSWORD
              Value: 'yes'
            - Name: WORDPRESS_DATABASE_HOST
              Value: !ImportValue AuroraDBClusterEndpoint
            - Name: WORDPRESS_DATABASE_USER
              Value: '{{resolve:secretsmanager:wordpress-aurora:SecretString:username}}'
            - Name: WORDPRESS_DATABASE_PASSWORD
              Value: '{{resolve:secretsmanager:wordpress-aurora:SecretString:password}}'
            - Name: WORDPRESS_DATABASE_NAME
              Value: wordpress
            - Name: WORDPRESS_ENABLE_HTTPS
              Value: 'yes'
            - Name: WORDPRESS_ENABLE_DATABASE_SSL
              Value: 'yes'
            - Name: PHP_MAX_EXECUTION_TIME
              Value: 300
            - Name: PHP_MAX_INPUT_TIME
              Value: 60
            - Name: PHP_MEMORY_LIMIT
              Value: 512M
            - Name: PHP_POST_MAX_SIZE
              Value: 16M
            - Name: PHP_UPLOAD_MAX_FILESIZE
              Value: 16M
          Image: bitnami/wordpress:6.0.0-debian-11-r1 # 6.6.1-debian-12-r1 #
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: /wordpress/ecs/awslogs/bitnami
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: wordpress
          MountPoints:
            - ContainerPath: /bitnami/wordpress
              SourceVolume: wordpress
          Name: wordpress
          PortMappings:
            - ContainerPort: 8443
              Protocol: tcp
          # User: 1000:1000 # bitnami runs as user 1001
      Cpu: 500
      ExecutionRoleArn: !Ref EcsTaskExecutionRole
      Family: wordpress
      Memory: 768
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      Volumes: 
        - Host: 
            SourcePath: /bitnami/wordpress
          Name: wordpress
  
  EcsService:
    Type: AWS::ECS::Service
    Properties:
      CapacityProviderStrategy:
        - CapacityProvider: !Ref EcsCapacityProvider
          Weight: 1
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      HealthCheckGracePeriodSeconds: 300
      LoadBalancers:
        - ContainerName: wordpress
          ContainerPort: 8443
          TargetGroupArn: !ImportValue AlbTargetGroupArn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - !ImportValue EcsTaskSecurityGroupId
          Subnets:
            - !ImportValue PrivateSubnetAId
            - !ImportValue PrivateSubnetBId
      PlacementStrategies: 
        - Field: MEMORY
          Type: binpack
      TaskDefinition: !Ref EcsBitnamiTaskDef

  EcsScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 2 # check max on ec2 autoscaling group
      MinCapacity: 1
      ResourceId: !Sub
        - service/${ClusterName}/${ServiceName}
        - ClusterName: !Ref EcsCluster
          ServiceName: !GetAtt EcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  EcsCpuScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: wordpress-cpu
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref EcsScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification: 
          PredefinedMetricType: ECSServiceAverageCPUUtilization # | ECSServiceAverageMemoryUtilization
          # ResourceLabel: String
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        TargetValue: 70

  EcsMemoryScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: wordpress-memory
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref EcsScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification: 
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        TargetValue: 90