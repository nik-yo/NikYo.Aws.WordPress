AWSTemplateFormatVersion: 2010-09-09
Parameters:
  CidrBlock:
    Type: String
    Description: 'WordPress VPC CIDR Block. Default: 10.0.0.0/16'
    Default: '10.0.0.0/16'
    # Generated by ChatGPT-4o
    AllowedPattern: ^((10\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])/(8|9|1[0-9]|2[0-9]|3[0-2]))|(172\.(1[6-9]|2[0-9]|3[0-1])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])/(12|1[3-9]|2[0-9]|3[0-2]))|(192\.168\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])/(16|1[7-9]|2[0-9]|3[0-2])))$
    
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true

  # Internet Gateway
  Igw:
    Type: AWS::EC2::InternetGateway

  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  # Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.0.0/24'
        - FirstOctet: !Select [0, !Split [".", !Select [0, !Split ["/", !Ref CidrBlock]]]]
          SecondOctet: !Select [1, !Split [".", !Select [0, !Split ["/", !Ref CidrBlock]]]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.1.0/24'
        - FirstOctet: !Select [0, !Split [".", !Select [0, !Split ["/", !Ref CidrBlock]]]]
          SecondOctet: !Select [1, !Split [".", !Select [0, !Split ["/", !Ref CidrBlock]]]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.10.0/24'
        - FirstOctet: !Select [0, !Split [".", !Select [0, !Split ["/", !Ref CidrBlock]]]]
          SecondOctet: !Select [1, !Split [".", !Select [0, !Split ["/", !Ref CidrBlock]]]]
      VpcId: !Ref Vpc

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.11.0/24'
        - FirstOctet: !Select [0, !Split [".", !Select [0, !Split ["/", !Ref CidrBlock]]]]
          SecondOctet: !Select [1, !Split [".", !Select [0, !Split ["/", !Ref CidrBlock]]]]
      VpcId: !Ref Vpc

  DataSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.20.0/24'
        - FirstOctet: !Select [0, !Split [".", !Select [0, !Split ["/", !Ref CidrBlock]]]]
          SecondOctet: !Select [1, !Split [".", !Select [0, !Split ["/", !Ref CidrBlock]]]]
      VpcId: !Ref Vpc

  DataSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.21.0/24'
        - FirstOctet: !Select [0, !Split [".", !Select [0, !Split ["/", !Ref CidrBlock]]]]
          SecondOctet: !Select [1, !Split [".", !Select [0, !Split ["/", !Ref CidrBlock]]]]
      VpcId: !Ref Vpc

  PublicSubnetARouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PrivateSubnetARouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetBRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  DataSubnetARouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DataSubnetA

  DataSubnetBRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DataSubnetB

  # NAT Gateway
  NatEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnetA

  # Routes
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: Igw
    Properties:
      GatewayId: !Ref Igw
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  PrivateInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

Outputs:
  VpcIdOutput:
    Value: !Ref Vpc
    Export:
      Name: VpcId

  PublicSubnetAIdOutput:
    Value: !Ref PublicSubnetA
    Export:
      Name: PublicSubnetAId

  PublicSubnetBIdOutput:
    Value: !Ref PublicSubnetB
    Export:
      Name: PublicSubnetBId

  PrivateSubnetAIdOutput:
    Value: !Ref PrivateSubnetA
    Export:
      Name: PrivateSubnetAId

  PrivateSubnetBIdOutput:
    Value: !Ref PrivateSubnetB
    Export:
      Name: PrivateSubnetBId

  DataSubnetAIdOutput:
    Value: !Ref DataSubnetA
    Export:
      Name: DataSubnetAId

  DataSubnetBIdOutput:
    Value: !Ref DataSubnetB
    Export:
      Name: DataSubnetBId